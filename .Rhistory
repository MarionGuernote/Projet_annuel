if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter = data.frame(target = edgesif[nrow(edgesif),1], attr = "", source = "ELSE", interaction = c("interacts"), weight = 1)
edges = rbind (edges, inter)
node = t(data.frame(target = edgesif[nrow(edgesif),1], source =  "ELSE"))
colnames(node)[1] = "id"
nodes = rbind(nodes, node)
nodes =as.vector(nodes)
nodes <- data.frame(id = unique(nodes), stringsAsFactors=TRUE)
nodes <- subset(nodes, id != "NA")
nodes <- subset(nodes, id != "=")
nodes <- subset(nodes, id != "<-")
edgesif = rbind(edgesif,data.frame(target = "ELSE", attr = "", source = "ELSE", interaction = c("interacts"), weight = 1))
}
}
# if (isTRUE(token[i,1] == "FOR" )){
#    tabinter = t(c("FOR", cptif, cptifimb))
#    tabopen = rbind(tabopen, tabinter)
# }
# vérifie qu'un if, else if, else ou un for se termine
if (isTRUE(token[i,1] == "'}'")){
#enlève la dernière ligne du tableau de ce qui est ouvert (if et for) puisque la dernière chose ouverte est focément la première chose fermée
tabopen = as.data.frame(tabopen)
l = nrow(tabopen)
if (tabopen[l,1] == "IF" && length(edgesif) != 0 && nrow(edgesif) != 0){
m = nrow(edgesif)
edgesif = edgesif[-m,]
}else if (isTRUE(tabopen[l,1] == "ELSE IF") || isTRUE(tabopen[l,1] == "ELSE") && length(edgesif) != 0 && nrow(edgesif) != 0){
m = nrow(edgesif)
if (m-1 > 0){
edgesif = edgesif[-(m-1),]
}else{
edgesif = edgesif[-m,]
}
}else if (tabopen[l,1] == "ELSE" && length(edgesif) != 0 && nrow(edgesif) != 0){
m = nrow(edgesif)
if (m-1 > 0){
edgesif = edgesif[-(m-1),]
}else{
edgesif = edgesif[-m,]
}
}
tabopen = tabopen[-l,]
#vérifie si il y a encore des if dans le tableau, si ce n'est pas le cas on réinitialise le compteur des if imbriqué, puisque la présence d'un nouveau if va entrainer une nouvelle imbrication (on va passer de 1.3 à 2.0 )
if (length(tabopen) != 0) {
for (j in 0:nrow(tabopen)){
if (isTRUE(tabopen[j,1] == "IF")){
cpttransi =  cpttransi +1
}
}
}
if (cpttransi == 0 ){
cptifimb = 0
}
}
#search simple assignation (calculation or x = c)
if (token[i,1] == "SYMBOL" && isTRUE( token[i,2] == "EQ_ASSIGN" || token[i,2] == "LEFT_ASSIGN") && isTRUE( token[i,3] == "NUM_CONST" || token[i,3] == "STR_CONST"|| isTRUE(token[i,3] == "SYMBOL" && token[i,4] == 0) ) ){
#relie l'assignation simple au if dans lequel elle est traitée
if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter = data.frame(target = content[i,1], attr = edgesif[nrow(edgesif),2], source = edgesif[nrow(edgesif),1], interaction = c("interacts"), weight = 1)
edges = rbind (edges, inter)
}
contentS = t(as.data.frame(content[i,]))
tokenS = t(as.data.frame(token[i,]))
simpleAssign = SimpleAssignationCy( contentS , tokenS, edges, nodes)
edges = simpleAssign$edges
nodes = simpleAssign$nodes
}
elseif = FALSE
}
node = c()
row.names(nodes) <- 1 : nrow(nodes)
for (i in 0:nrow(nodes)){
l = data.frame(nodes[i,])
node = rbind(node, l)
}
colnames(node)[1] = "id"
cytoscapePing()
createNetworkFromDataFrames(node, edges, title = "assignation network", collection = "En cours")
#----------------------------------
setNodeShapeDefault ('ELLIPSE')
setNodeColorDefault ('#AAFF88')
setNodeSizeDefault  (60)
setNodeFontSizeDefault (30)
#----------------------------------
getNodeShapes ()   # diamond, ellipse, trapezoid, triangle, etc.
setEdgeLabelMapping(table.column = "attr",style.name = 'default')
setEdgeTargetArrowShapeDefault(new.shape = "ARROW")
length(edgesif) != 0 && nrow(edgesif) != 0
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
library(formatR)
library(RCy3)
library(stringr)
library(tidyverse)
setwd("D:/Ordi/Documents/GitHub/Projet_annuel")
source("SimpleAssignationCytoscape.R")
source("IfCytoscapeV1.R")
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#extracts the size of the longest line (use to create table results (token and content))
lmax = 0
for (i in 1:length(xy.list)) {
l = length(xy.list[[i]]$token)
if (l > lmax){
lmax =l
}
}
#extract tokens and content for each row
token = c()
content = c()
for (i in 1:length(xy.list)) {
#l = length(xy.list[[i]]$token)
token = rbind(token, c( xy.list[[i]]$token[c(1:lmax)] ) )
content = rbind(content, c( xy.list[[i]]$text[c(1:lmax)] ) )
}
token[is.na(token)] <- 0
edges =c()
nodes =c()
tabopen = c() #permet de stocker ce qui est ouvert dans le code
cptif = 0 #compte le nombre de if total dans le code pour les différencier avec cytoscape
cptifimb = 0 # compte les if imbriqué dans le if acutellement ouvert afin de dif dans cyto
cptfor = 0
cptforilb = 0
elseif =FALSE
cptelseif = 0
cpttransi = 0
edgesif = c()
trgif = c()
inter2 = c()
#analyze each line and send to the right function to treat
for ( i in 0:60){
#search if condition
if(isTRUE(token[i,1] == "IF")){
# regarde si il y a déjà un if d'ouvert pour gérer l'imbrication
if (length(tabopen) != 0) {
for (n in 0:nrow(tabopen)){
if (isTRUE(tabopen[n,1] == "IF")){
cptifimb =  cptifimb +1
}
}
}
#si il n'y a pas d'imbri commencé il y a un nouveau if donc on incrémente le cpt if et on réinitialise le tableau edges if
if (cptifimb == 0) {
cptif = cptif + 1
}
#on crée le tableau de ce qui est ouvert pour contenir les infos essentielles
tabinter = t(c("IF", cptif, cptifimb))
tabopen = rbind(tabopen, tabinter)
contentIf = t(as.data.frame(content[i,]))
tokenIf = t(as.data.frame(token[i,]))
ifAssign = IfCy(contentIf, tokenIf, edges, nodes, cptif, cptifimb)
#relie l'assignation simple au if dans lequel elle est traitée
inter = ifAssign$inter
if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter2 = data.frame(target = edgesif[nrow(edgesif),1], attr = edgesif[nrow(edgesif),2], source = inter[nrow(inter),1], interaction = c("interacts"), weight = 1)
}
edges = ifAssign$edges
nodes = ifAssign$nodes
if (length(inter2) != 0) {
edges =rbind(edges, inter2)
}
edgesif = rbind(edgesif,inter)
}
#search else if condition
if(  isTRUE(token[i,2] == "ELSE") && isTRUE(token[i ,3] == "IF") ){
# regarde si il y a déjà un else if d'ouvert pour sa numérotation
if (length(tabopen) != 0) {
for (n in 0:nrow(tabopen)){
if ( isTRUE(tabopen[n,1] == "ELSE IF") ){
cptelseif =  cptelseif +1
}
}
}
#on crée le tableau de ce qui est ouvert pour contenir les infos essentielles
tabinter = t(c("ELSE IF", cptif, cptelseif))
tabopen = rbind(tabopen, tabinter)
contentIf = t(as.data.frame(content[i,]))
tokenIf = t(as.data.frame(token[i,]))
ifAssign = IfCy(contentIf, tokenIf, edges, nodes, cptif, cptelseif)
#relie l'assignation simple au if dans lequel elle est traitée
inter = ifAssign$inter
if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter2 = data.frame(target = edgesif[nrow(edgesif),1], attr = "", source = inter[nrow(inter),1], interaction = c("interacts"), weight = 1)
}
edges = ifAssign$edges
nodes = ifAssign$nodes
if (length(inter2) != 0) {
edges =rbind(edges, inter2)
}
edgesif = rbind(edgesif,inter)
}
#search else  condition
if(  isTRUE(token[i,2] == "ELSE") && isTRUE(token[i ,3] != "IF")  ){
#on crée le tableau de ce qui est ouvert pour contenir les infos essentielles
tabinter = t(c("ELSE", cptif, 0))
tabopen = rbind(tabopen, tabinter)
if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter = data.frame(target = edgesif[nrow(edgesif),1], attr = "", source = "ELSE", interaction = c("interacts"), weight = 1)
edges = rbind (edges, inter)
node = t(data.frame(target = edgesif[nrow(edgesif),1], source =  "ELSE"))
colnames(node)[1] = "id"
nodes = rbind(nodes, node)
nodes =as.vector(nodes)
nodes <- data.frame(id = unique(nodes), stringsAsFactors=TRUE)
nodes <- subset(nodes, id != "NA")
nodes <- subset(nodes, id != "=")
nodes <- subset(nodes, id != "<-")
edgesif = rbind(edgesif,data.frame(target = "ELSE", attr = "", source = "ELSE", interaction = c("interacts"), weight = 1))
}
}
# if (isTRUE(token[i,1] == "FOR" )){
#    tabinter = t(c("FOR", cptif, cptifimb))
#    tabopen = rbind(tabopen, tabinter)
# }
# vérifie qu'un if, else if, else ou un for se termine
if (isTRUE(token[i,1] == "'}'")){
#enlève la dernière ligne du tableau de ce qui est ouvert (if et for) puisque la dernière chose ouverte est focément la première chose fermée
tabopen = as.data.frame(tabopen)
l = nrow(tabopen)
if (tabopen[l,1] == "IF" && length(edgesif) != 0 && nrow(edgesif) != 0){
m = nrow(edgesif)
edgesif = edgesif[-m,]
}else if (isTRUE(tabopen[l,1] == "ELSE IF") || isTRUE(tabopen[l,1] == "ELSE") && length(edgesif) != 0 && nrow(edgesif) != 0){
m = nrow(edgesif)
if (m-1 > 0){
edgesif = edgesif[-(m-1),]
}else{
edgesif = edgesif[-m,]
}
}else if (tabopen[l,1] == "ELSE" && length(edgesif) != 0 && nrow(edgesif) != 0){
m = nrow(edgesif)
if (m-1 > 0){
edgesif = edgesif[-(m-1),]
}else{
edgesif = edgesif[-m,]
}
}
tabopen = tabopen[-l,]
#vérifie si il y a encore des if dans le tableau, si ce n'est pas le cas on réinitialise le compteur des if imbriqué, puisque la présence d'un nouveau if va entrainer une nouvelle imbrication (on va passer de 1.3 à 2.0 )
if (length(tabopen) != 0) {
for (j in 0:nrow(tabopen)){
if (isTRUE(tabopen[j,1] == "IF")){
cpttransi =  cpttransi +1
}
}
}
if (cpttransi == 0 ){
cptifimb = 0
}
}
#search simple assignation (calculation or x = c)
if (token[i,1] == "SYMBOL" && isTRUE( token[i,2] == "EQ_ASSIGN" || token[i,2] == "LEFT_ASSIGN") && isTRUE( token[i,3] == "NUM_CONST" || token[i,3] == "STR_CONST"|| isTRUE(token[i,3] == "SYMBOL" && token[i,4] == 0) ) ){
#relie l'assignation simple au if dans lequel elle est traitée
if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter = data.frame(target = content[i,1], attr = edgesif[nrow(edgesif),2], source = edgesif[nrow(edgesif),1], interaction = c("interacts"), weight = 1)
edges = rbind (edges, inter)
}
contentS = t(as.data.frame(content[i,]))
tokenS = t(as.data.frame(token[i,]))
simpleAssign = SimpleAssignationCy( contentS , tokenS, edges, nodes)
edges = simpleAssign$edges
nodes = simpleAssign$nodes
}
elseif = FALSE
inter2 = c()
}
node = c()
row.names(nodes) <- 1 : nrow(nodes)
for (i in 0:nrow(nodes)){
l = data.frame(nodes[i,])
node = rbind(node, l)
}
colnames(node)[1] = "id"
cytoscapePing()
createNetworkFromDataFrames(node, edges, title = "assignation network", collection = "En cours")
#----------------------------------
setNodeShapeDefault ('ELLIPSE')
setNodeColorDefault ('#AAFF88')
setNodeSizeDefault  (60)
setNodeFontSizeDefault (30)
#----------------------------------
getNodeShapes ()   # diamond, ellipse, trapezoid, triangle, etc.
setEdgeLabelMapping(table.column = "attr",style.name = 'default')
setEdgeTargetArrowShapeDefault(new.shape = "ARROW")
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
library(formatR)
library(RCy3)
library(stringr)
library(tidyverse)
setwd("D:/Ordi/Documents/GitHub/Projet_annuel")
source("SimpleAssignationCytoscape.R")
source("IfCytoscapeV1.R")
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#extracts the size of the longest line (use to create table results (token and content))
lmax = 0
for (i in 1:length(xy.list)) {
l = length(xy.list[[i]]$token)
if (l > lmax){
lmax =l
}
}
#extract tokens and content for each row
token = c()
content = c()
for (i in 1:length(xy.list)) {
#l = length(xy.list[[i]]$token)
token = rbind(token, c( xy.list[[i]]$token[c(1:lmax)] ) )
content = rbind(content, c( xy.list[[i]]$text[c(1:lmax)] ) )
}
token[is.na(token)] <- 0
edges =c()
nodes =c()
tabopen = c() #permet de stocker ce qui est ouvert dans le code
cptif = 0 #compte le nombre de if total dans le code pour les différencier avec cytoscape
cptifimb = 0 # compte les if imbriqué dans le if acutellement ouvert afin de dif dans cyto
cptfor = 0
cptforilb = 0
elseif =FALSE
cptelseif = 0
cpttransi = 0
edgesif = c()
trgif = c()
inter2 = c()
#analyze each line and send to the right function to treat
for ( i in 0:nrow(token)){
#search if condition
if(isTRUE(token[i,1] == "IF")){
# regarde si il y a déjà un if d'ouvert pour gérer l'imbrication
if (length(tabopen) != 0) {
for (n in 0:nrow(tabopen)){
if (isTRUE(tabopen[n,1] == "IF")){
cptifimb =  cptifimb +1
}
}
}
#si il n'y a pas d'imbri commencé il y a un nouveau if donc on incrémente le cpt if et on réinitialise le tableau edges if
if (cptifimb == 0) {
cptif = cptif + 1
}
#on crée le tableau de ce qui est ouvert pour contenir les infos essentielles
tabinter = t(c("IF", cptif, cptifimb))
tabopen = rbind(tabopen, tabinter)
contentIf = t(as.data.frame(content[i,]))
tokenIf = t(as.data.frame(token[i,]))
ifAssign = IfCy(contentIf, tokenIf, edges, nodes, cptif, cptifimb)
#relie l'assignation simple au if dans lequel elle est traitée
inter = ifAssign$inter
if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter2 = data.frame(target = edgesif[nrow(edgesif),1], attr = edgesif[nrow(edgesif),2], source = inter[nrow(inter),1], interaction = c("interacts"), weight = 1)
}
edges = ifAssign$edges
nodes = ifAssign$nodes
if (length(inter2) != 0) {
edges =rbind(edges, inter2)
}
edgesif = rbind(edgesif,inter)
}
#search else if condition
if(  isTRUE(token[i,2] == "ELSE") && isTRUE(token[i ,3] == "IF") ){
# regarde si il y a déjà un else if d'ouvert pour sa numérotation
if (length(tabopen) != 0) {
for (n in 0:nrow(tabopen)){
if ( isTRUE(tabopen[n,1] == "ELSE IF") ){
cptelseif =  cptelseif +1
}
}
}
#on crée le tableau de ce qui est ouvert pour contenir les infos essentielles
tabinter = t(c("ELSE IF", cptif, cptelseif))
tabopen = rbind(tabopen, tabinter)
contentIf = t(as.data.frame(content[i,]))
tokenIf = t(as.data.frame(token[i,]))
ifAssign = IfCy(contentIf, tokenIf, edges, nodes, cptif, cptelseif)
#relie l'assignation simple au if dans lequel elle est traitée
inter = ifAssign$inter
if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter2 = data.frame(target = edgesif[nrow(edgesif),1], attr = "", source = inter[nrow(inter),1], interaction = c("interacts"), weight = 1)
}
edges = ifAssign$edges
nodes = ifAssign$nodes
if (length(inter2) != 0) {
edges =rbind(edges, inter2)
}
edgesif = rbind(edgesif,inter)
}
#search else  condition
if(  isTRUE(token[i,2] == "ELSE") && isTRUE(token[i ,3] != "IF")  ){
#on crée le tableau de ce qui est ouvert pour contenir les infos essentielles
tabinter = t(c("ELSE", cptif, 0))
tabopen = rbind(tabopen, tabinter)
if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter = data.frame(target = edgesif[nrow(edgesif),1], attr = "", source = "ELSE", interaction = c("interacts"), weight = 1)
edges = rbind (edges, inter)
node = t(data.frame(target = edgesif[nrow(edgesif),1], source =  "ELSE"))
colnames(node)[1] = "id"
nodes = rbind(nodes, node)
nodes =as.vector(nodes)
nodes <- data.frame(id = unique(nodes), stringsAsFactors=TRUE)
nodes <- subset(nodes, id != "NA")
nodes <- subset(nodes, id != "=")
nodes <- subset(nodes, id != "<-")
edgesif = rbind(edgesif,data.frame(target = "ELSE", attr = "", source = "ELSE", interaction = c("interacts"), weight = 1))
}
}
# if (isTRUE(token[i,1] == "FOR" )){
#    tabinter = t(c("FOR", cptif, cptifimb))
#    tabopen = rbind(tabopen, tabinter)
# }
# vérifie qu'un if, else if, else ou un for se termine
if (isTRUE(token[i,1] == "'}'")){
#enlève la dernière ligne du tableau de ce qui est ouvert (if et for) puisque la dernière chose ouverte est focément la première chose fermée
tabopen = as.data.frame(tabopen)
l = nrow(tabopen)
if (tabopen[l,1] == "IF" && length(edgesif) != 0 && nrow(edgesif) != 0){
m = nrow(edgesif)
edgesif = edgesif[-m,]
}else if (isTRUE(tabopen[l,1] == "ELSE IF") || isTRUE(tabopen[l,1] == "ELSE") && length(edgesif) != 0 && nrow(edgesif) != 0){
m = nrow(edgesif)
if (m-1 > 0){
edgesif = edgesif[-(m-1),]
}else{
edgesif = edgesif[-m,]
}
}else if (tabopen[l,1] == "ELSE" && length(edgesif) != 0 && nrow(edgesif) != 0){
m = nrow(edgesif)
if (m-1 > 0){
edgesif = edgesif[-(m-1),]
}else{
edgesif = edgesif[-m,]
}
}
tabopen = tabopen[-l,]
#vérifie si il y a encore des if dans le tableau, si ce n'est pas le cas on réinitialise le compteur des if imbriqué, puisque la présence d'un nouveau if va entrainer une nouvelle imbrication (on va passer de 1.3 à 2.0 )
if (length(tabopen) != 0) {
for (j in 0:nrow(tabopen)){
if (isTRUE(tabopen[j,1] == "IF")){
cpttransi =  cpttransi +1
}
}
}
if (cpttransi == 0 ){
cptifimb = 0
}
}
#search simple assignation (calculation or x = c)
if (token[i,1] == "SYMBOL" && isTRUE( token[i,2] == "EQ_ASSIGN" || token[i,2] == "LEFT_ASSIGN") && isTRUE( token[i,3] == "NUM_CONST" || token[i,3] == "STR_CONST"|| isTRUE(token[i,3] == "SYMBOL" && token[i,4] == 0) ) ){
#relie l'assignation simple au if dans lequel elle est traitée
if (length(edgesif) != 0 && nrow(edgesif) != 0) {
inter = data.frame(target = content[i,1], attr = edgesif[nrow(edgesif),2], source = edgesif[nrow(edgesif),1], interaction = c("interacts"), weight = 1)
edges = rbind (edges, inter)
}
contentS = t(as.data.frame(content[i,]))
tokenS = t(as.data.frame(token[i,]))
simpleAssign = SimpleAssignationCy( contentS , tokenS, edges, nodes)
edges = simpleAssign$edges
nodes = simpleAssign$nodes
}
elseif = FALSE
inter2 = c()
}
node = c()
row.names(nodes) <- 1 : nrow(nodes)
for (i in 0:nrow(nodes)){
l = data.frame(nodes[i,])
node = rbind(node, l)
}
colnames(node)[1] = "id"
cytoscapePing()
createNetworkFromDataFrames(node, edges, title = "assignation network", collection = "En cours")
#----------------------------------
setNodeShapeDefault ('ELLIPSE')
setNodeColorDefault ('#AAFF88')
setNodeSizeDefault  (60)
setNodeFontSizeDefault (30)
#----------------------------------
getNodeShapes ()   # diamond, ellipse, trapezoid, triangle, etc.
setEdgeLabelMapping(table.column = "attr",style.name = 'default')
setEdgeTargetArrowShapeDefault(new.shape = "ARROW")
