View(tab)
tab = lapply(test, `[[`, 7)
View(tab)
View(tab)
tab = lapply(test, `[[`, 7)$
tab = as.data.frame(tab)
tab = lapply(test, `[[`, 7)$
tab = as.data.frame(tab[[value]])
tab = lapply(test, `[[`, 7)$
tab = as.data.frame(tab[value])
class(tab)
class(tab$`17`)
tab2 = lapply(test, `[[`, 9)
View(tab2)
View(tab2)
taball = tab + tab2
tab = data.frame(tab)
tab = data.frame(matrix(unlist(tab), nrow=length(tab), byrow=T))
tab = data.frame(tab )
View(tab)
View(tab)
tab = lapply(test, `[[`, 7)
tab = as.data.frame(lapply(tab, `[[`, 1))
View(tab)
View(tab)
tab = as.data.frame(tab)
tab = data.frame(tab )
View(tab)
View(tab)
tab = lapply(test, `[[`, 7)
tab = data.frame(tab )
View(tab)
View(tab)
tab = as.data.frame(tab)
tab = as.data.frame(tab)
tab = data.frame(tab)
tab = lapply(test, `[[`, 7)
tab2 = lapply(test, `[[`, 9)
tab = data.frame(tab)
tab = data.frame(tab, check.rows = F)
tab = data.frame(tab, check.rows = F, check.names = F)
View(tab)
View(tab)
tab = data.frame(tab )
tab = do.call('rbind',tab )
View(tab)
View(tab)
tab = lapply(test, `[[`, 7)
tab = do.call('rbind',tab )
View(tab)
View(tab)
tab = lapply(test, `[[`, 7)
tab = do.call('rbind',tab )
View(parsed)
View(parsed)
View(tab)
View(tab)
tab = lapply(test, `[[`, 7)
View(tab)
View(tab)
tab = data.frame(tab )
tab = as.data.frame(tab )
View(tab)
View(tab)
tab = do.call(tab )
tab = do.call('rbind', tab )
View(tab)
View(tab)
tab = lapply(test, `[[`, 7)
tab = do.call('paste', tab )
tab = lapply(test, `[[`, 7)
tab = do.call('rbind', tab )
tab = lapply(test, `[[`, 7)
tab2 = lapply(test, `[[`, 9)
View(tab2)
View(tab2)
tab[["36"]]
tab[["51"]]
tab[["81"]]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 1) == "SYMBOL")]
View(ind_eq)
View(ind_eq)
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 1) %in% assign)]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 1) == "SYMBOL")]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 2) %in% assign)]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 3) %in% c("NUM_CONST", "STR_CONST" ))]
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 1) == "SYMBOL")]
library(formatR)
library(RCy3)
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.sc = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 1) == "SYMBOL")]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 3) %in% c("NUM_CONST", "STR_CONST" ))]
View(ind_eq)
View(ind_eq)
# test = xy.list[lengths((lapply(xy.list, `[[`, 7))) > 2]
# test2 = which(lapply(lapply(test, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))
# test = test[test2]
tab = lapply(ind_eq, `[[`, 7)
View(tab)
View(tab)
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
library(formatR)
library(RCy3)
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.sc = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 1) == "SYMBOL")]
View(ind_eq)
View(ind_eq)
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
simpleAssign = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 3) %in% c("NUM_CONST", "STR_CONST" ))]
View(simpleAssign)
View(simpleAssign)
# test = xy.list[lengths((lapply(xy.list, `[[`, 7))) > 2]
# test2 = which(lapply(lapply(test, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))
# test = test[test2]
tab = lapply(simpleAssign, `[[`, 7)
View(tab)
View(tab)
tab[["30"]]
#extracting equal assign lines of length 3 (something = some other thing)
a =c("NUM_CONST", "STR_CONST")
simpleAssign = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 3) %in% a )]
simpleAssign = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 3) ==  "NUM_CONST")]
View(simpleAssign)
View(simpleAssign)
# test = xy.list[lengths((lapply(xy.list, `[[`, 7))) > 2]
# test2 = which(lapply(lapply(test, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))
# test = test[test2]
tab = lapply(simpleAssign, `[[`, 7)
View(tab)
View(tab)
lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 3)
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 1) == "SYMBOL")]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[ind_eq], `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
simpleAssign = xy.list[as.logical(lapply(lapply(xy.list[ind_eq], `[[`, 7), `[[`, 3) ==  "NUM_CONST")]
ind_eq = xy.list[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
ind_eq = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
library(formatR)
library(RCy3)
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.sc = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
#extracting equal assign lines of length 3 (something = some other thing)
a =c("NUM_CONST", "STR_CONST")
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
ind_eq = xy.list[as.logical(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 1) == "SYMBOL")]
View(xy.list)
View(xy.list)
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.sc = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
View(xy.list)
View(xy.list)
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
sum(tmp_ind)
length(tmp_ind)
# tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
ind_eq = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "SYMBOL")]
View(xy.list)
View(xy.list)
View(ind_eq)
View(ind_eq)
ind_eq = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
simpleAssign = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 3) ==  "NUM_CONST")]
View(simpleAssign)
View(simpleAssign)
# test = xy.list[lengths((lapply(xy.list, `[[`, 7))) > 2]
# test2 = which(lapply(lapply(test, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))
# test = test[test2]
tab = lapply(ind_eq, `[[`, 7)
View(tab)
View(tab)
simpleAssign = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 3) %in% c("NUM_CONST", "STR_CONST"))]
View(simpleAssign)
View(simpleAssign)
tab[["89"]]
eq2 = xy.list[tmp_ind][simpleAssign]
tmp_ind = match(xy.list, simpleAssign)
tmp_ind = match( simpleAssign, xy.list)
xy.list[tmp_ind[ind_eq]] <- NULL
xy.list[tmp_ind[simpleAssign]] <- NULL
eq2 = xy.list[tmp_ind][simpleAssign]
View(xy.list)
View(xy.list)
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
# LIBRARIES ---------------------------------------------------------------
setwd("D:/Ordi/Documents/GitHub/Projet_annuel")
library(formatR)
library(RCy3)
formatR::tidy_file("./test.R")
p_dat = parse("./test.R")
#parse script
parsed = getParseData(p_dat)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token == "expr")), ]
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.rm = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
#extracting equal assign lines of length 3 (something = some other thing)
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
ind_eq = which(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))
eq = xy.list[tmp_ind][ind_eq]
View(eq)
View(eq)
xy.list[tmp_ind[ind_eq]] <- NULL
class(tmp_ind)
#take the access path of the script to treat
simpleAssignation <- function(script) {
library(formatR)
library(RCy3)
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.sc = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
#assignation of variable with a operation or a direct attribution
ind_eq = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "SYMBOL")] #enlève les lignes qui commence pas par un symbol
ind_eq = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
simpleAssign = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 3) %in% c("NUM_CONST", "STR_CONST"))]
tmp_ind = match( simpleAssign, xy.list)
xy.list[tmp_ind[simpleAssign]] <- NULL
# test = xy.list[lengths((lapply(xy.list, `[[`, 7))) > 2]
# test2 = which(lapply(lapply(test, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))
# test = test[test2]
tab = lapply(ind_eq, `[[`, 7)
# tab2 = lapply(test, `[[`, 9)
}
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
library(formatR)
library(RCy3)
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.sc = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "SYMBOL")] #enlève les lignes qui commence pas par un symbol
ind_eq = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
simpleAssign = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 3) %in% c("NUM_CONST", "STR_CONST"))]
tmp_ind = match( simpleAssign, xy.list)
xy.list[tmp_ind[simpleAssign]] <- NULL
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
# LIBRARIES ---------------------------------------------------------------
setwd("D:/Ordi/Documents/GitHub/Projet_annuel")
library(formatR)
library(RCy3)
formatR::tidy_file("./test.R")
p_dat = parse("./test.R")
#parse script
parsed = getParseData(p_dat)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token == "expr")), ]
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.rm = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
#extracting equal assign lines of length 3 (something = some other thing)
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
ind_eq = which(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))
View(xy.list)
View(xy.list)
View(xy.list)
View(xy.list)
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
library(formatR)
library(RCy3)
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.sc = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "SYMBOL")] #enlève les lignes qui commence pas par un symbol
ind_eq = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
simpleAssign = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 3) %in% c("NUM_CONST", "STR_CONST"))]
View(simpleAssign)
View(simpleAssign)
tmp_ind = match( simpleAssign, xy.list)
xy.list[tmp_ind[simpleAssign]]
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
# LIBRARIES ---------------------------------------------------------------
setwd("D:/Ordi/Documents/GitHub/Projet_annuel")
library(formatR)
library(RCy3)
formatR::tidy_file("./test.R")
p_dat = parse("./test.R")
#parse script
parsed = getParseData(p_dat)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token == "expr")), ]
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.rm = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
#extracting equal assign lines of length 3 (something = some other thing)
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
ind_eq = which(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))
xy.list[tmp_ind] <- NULL
rm(list = ls(all = TRUE))  # broom variables
gc()  # garbage collector
cat("\f")  #clear console
library(formatR)
library(RCy3)
script = "test.R"
formatR::tidy_file(script)
p_data = parse(script)
#parse script
parsed = getParseData(p_data)
#removing unwanted/empty/unknown lines
parsed = parsed[-c(which(parsed$token %in% c("expr", "equal_assign", "forcond"))), ]
xy.list <- split(parsed, f = parsed$line1)
#extracting comments
xy.list.comments = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT")]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "COMMENT") == F]
#extracting packages imports
xy.list.packages = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library")]
packages = as.character(lapply(lapply(xy.list.packages, `[[`, 9), `[[`, 3))
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) == "library") == F]
l.packages=rep("library",length(packages))
packages=cbind(l.packages,packages)
#excluding system commands
to_remove = c("rm", "cat", "gc", "setwd")
xy.list.sc = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove)]
xy.list = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 9), `[[`, 1) %in% to_remove) == F]
ind_eq = xy.list[as.logical(lapply(lapply(xy.list, `[[`, 7), `[[`, 1) == "SYMBOL")] #enlève les lignes qui commence pas par un symbol
ind_eq = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))]
simpleAssign = ind_eq[as.logical(lapply(lapply(ind_eq, `[[`, 7), `[[`, 3) %in% c("NUM_CONST", "STR_CONST"))]
tmp_ind = match( simpleAssign, xy.list)
xy.list[tmp_ind] <- NULL
tmp_ind = which(lengths(lapply(xy.list, `[[`, 7)) == 3)
class(tmp_ind)
ind_eq = which(lapply(lapply(xy.list[tmp_ind], `[[`, 7), `[[`, 2) %in% c("EQ_ASSIGN",'LEFT_ASSIGN'))
eq = xy.list[tmp_ind][ind_eq]
View(eq)
xy.list[tmp_ind[ind_eq]] <- NULL
View(simpleAssign)
View(simpleAssign)
